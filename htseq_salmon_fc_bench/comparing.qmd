---
title: "Hackaton_preparation_and_templates"
format: html
editor: visual
---

```{r}
library(edgeR)
library(EDASeq)
library(clusterProfiler)
library(org.Mm.eg.db)
library(IOBR)
library(tidyverse)
library(rlang)
```

# Стратегия проверки

1. Прочитать метадату, выкинуть NA (есть)
2. Отфильтровать по каунтам HTSEQ (есть)
2.1 Выкинуть образцы HTSEQ из FC и salmon (сделаем на этапе корреляции)
2.2 Фильтровать по отсечке для каждого типа подсчета каунтов 
3. Сравнить полученные матрицы сырых ридов между собой
3.1 Пирсоновская корреляция на общем датасете (без нулей везде)
3.2 Пирсоновская корреляция на датасете, с максимальным удалением образцов
4. Посмотреть на ДЭ, сравнить разные эксперименты (направление ДЭ, логфолчендж для разных генов)

> TODO Фильтрация как в статье
> DE пан-тишью и потканевая
> Меры отличия: 
- количество выпадающих образцов (фильтр по образцам)
- количество выпадающих генов (фильтр по генам и спецфильтр по генам)
- дифэкспрессия

> Попробовать функцию count2tpm для перевода в тпмы

> Для исследования с фильтром как в статье -- отличия стабильных генов.

> Для гитхаба -- зафиксировать версии пакетов

Итого 18 DE на 2 вида фильтрации и 3 типа пайплайнов (108)

> Подготовить генерацию констрастов

## Метаданные и расклады

Добавляем возрастуню группу, как в оригинальной статье

## Таблица с каунтами

##### Оценить распределение для потранскриптного салмона

```{r}
# Читаем каунты
htseq_raw <- read.csv("htseq/old_counts.csv")
# Присваиваем имена генов
gene_names <- htseq_raw[[1]]
# Правим имена образцов
colnames(htseq_raw) <- colnames(htseq_raw) |> str_split_i("\\.", 1)
# Даем рядам имена генов
rownames(htseq_raw) <- gene_names
```

```{r}
# Читаем каунты
salmon_counts <- read.csv("salmon/counts_raw.csv")
# Присваиваем имена генов
gene_names <- salmon_counts[[1]]
# Даем рядам имена генов
rownames(salmon_counts) <- gene_names
```


```{r}
# Читаем каунты
salmon_gene_counts <- read.csv("salmon/gene_counts_raw.csv")
# Присваиваем имена генов
gene_names <- salmon_gene_counts[[1]]
# Даем рядам имена генов
rownames(salmon_gene_counts) <- gene_names
```

Смотрим на распределение
```{r}
create_counts_distribution <- function(raw_counts_df){
  total_counts <- raw_counts_df |> 
    summarise(across(where(is.numeric), ~ sum(.x)))
  
  samples <- total_counts |> t() |> rownames()
  counts <- total_counts |> t()
  
  df_for_filt <- tibble(
    sample = samples,
    counts = counts
  )
  
  return(df_for_filt)
}

salmon_total_tr_counts <- create_counts_distribution(salmon_counts)
salmon_total_gene_counts <- create_counts_distribution(salmon_gene_counts)
htseq_total_counts <- create_counts_distribution(htseq_raw)
```

Фильтруем по оригинальной отсечке 

> TODO Сделать relative-отсечку

```{r}
salmon_total_filtered_samples <- salmon_total_tr_counts |> 
  filter(counts > 5000000) |> 
  pull(sample)
htseq_total_filtered_samples <- htseq_total_counts |> 
  filter(counts > 5000000)|> 
  pull(sample)
salmon_total_filtered_gene_samples <- salmon_total_gene_counts |> 
  filter(counts > 5000000) |> 
  pull(sample)
```

Сохраняем промежуточный результат
```{r}
save.image("pre_tmm_stage.RData")
```

### Расчет метаданных

Подгружаем препроцессированные данные
```{r}
load("pre_tmm_stage.RData")
```

```{r}
# Читаем метаданные
metad <- read_csv("metadata.csv")
# Создаем функцию с вектором группы
create_condition_vector <- function(metad, filtered_names, target_vector){
  metad |> 
    filter(`Sample name` %in% filtered_names) |> 
    pull(target_vector)
}

# Добавляем возрастную группу и тип ткани, как в оригинальной статье

metad <- metad |> 
  # arrange(`raw file`) |> 
  filter(
    `source name` |> str_detect("NA[:digit:]", negate = TRUE)
  ) |> 
  # arrange(`characteristics: age`) |> 
  rowwise() |> 
  mutate(
    `characteristics: age` = paste0("month_", `characteristics: age`), 
    age_group_article = case_when(
      `characteristics: age` == "month_1" ~ "adolescent",
      `characteristics: age` %in% c("month_3", "month_6") ~ "young",
      `characteristics: age` %in% c("month_9", "month_12", "month_15") ~ "middle_aged",
      # Авторы не написали, к какой группе относятся 18-месячные мыши
      `characteristics: age` %in% c("month_18", "month_21", "month_24", "month_27") ~ "old"
    ), #|> as.factor() |> fct_relevel("adolescent", "young", "middle_aged", "old"),
    #`characteristics: age` = `characteristics: age` |> as.factor() |> fct_relevel(c("month_1", "month_3", "month_6", "month_9", "month_12", "month_15", "month_18", "month_21", "month_24", "month_27")),
    tissue = `source name` |> str_split_i("_[:digit:]", 1)
  )

htseq_ages <- create_condition_vector(metad, htseq_total_filtered_samples, "characteristics: age")
htseq_ages_article <- create_condition_vector(metad, htseq_total_filtered_samples, "age_group_article")
htseq_tissues <- create_condition_vector(metad, htseq_total_filtered_samples, "tissue")
salmon_ages <- create_condition_vector(metad, salmon_total_filtered_samples, "characteristics: age")
salmon_ages_article <- create_condition_vector(metad, salmon_total_filtered_samples, "age_group_article")
salmon_tissues <- create_condition_vector(metad, salmon_total_filtered_samples, "tissue")
```

```{r}
# metad |> 
#   filter(`characteristics: age` == "month_6") |> 
#   select(`Sample name`) |> write_csv("month_6_samples.csv")
```

### PCA

```{r}
tpm_salmon <- read_csv("tpm_salmon_gene.csv")
str(tpm_salmon)
pre_pca <- prcomp(tpm_salmon |> select(where(is.numeric)))
summary(pre_pca)
```

```{r}
# library(factoextra)
# library(ggbiplot)
# library(ggfortify)
# fviz_eig(pre_pca, addlabels = T, ylim = c(0, 40))
# 
# autoplot(pre_pca, data = )
```

## Генерируем TMM

```{r}
tmm_creator <- function(raw_counts_df, filtered_samples, grouping_vector){
  filtered_samples2 <- intersect(colnames(raw_counts_df), filtered_samples)
  raw_counts_df <- raw_counts_df[, filtered_samples2]
  edge_dge <- DGEList(counts=raw_counts_df, group=grouping_vector)
  # Фильтруем по генам
  keep <- filterByExpr(edge_dge, group=grouping_vector)
  edge_dge <- edge_dge[keep,,keep.lib.sizes=FALSE]
  # Делаем TMM
  edge_dge <- calcNormFactors(edge_dge)
  return(edge_dge)
}

tmm_creator2 <- function(raw_counts_df, filtered_samples, grouping_var, metad){
  filtered_samples2 <- intersect(colnames(raw_counts_df), filtered_samples)
  grouping_vector <- metad |> dplyr::filter(`Sample name` %in% filtered_samples2) |> pull(grouping_var)
  raw_counts_df <- raw_counts_df[, filtered_samples2]
  edge_dge <- DGEList(counts=raw_counts_df, group=grouping_vector)
  # Фильтруем по генам
  keep <- filterByExpr(edge_dge, group=grouping_vector)
  edge_dge <- edge_dge[keep,,keep.lib.sizes=FALSE]
  # Делаем TMM
  edge_dge <- calcNormFactors(edge_dge)
  return(edge_dge)
}
```

### Для месяцев

```{r}
tmm_htseq <- tmm_creator(htseq_raw, htseq_total_filtered_samples, htseq_ages)
tmm_salmon_tr <- tmm_creator(salmon_counts, salmon_total_filtered_samples, salmon_ages)
tmm_salmon_genes <- tmm_creator(salmon_gene_counts, salmon_total_filtered_samples, salmon_ages)
```

### Для возрастных групп
```{r}
tmm_htseq_art <- tmm_creator(htseq_raw, htseq_total_filtered_samples, htseq_ages_article)
tmm_salmon_tr_art <- tmm_creator(salmon_counts, salmon_total_filtered_samples, salmon_ages_article)
tmm_salmon_genes_art <- tmm_creator(salmon_gene_counts, salmon_total_filtered_samples, salmon_ages_article)
```

### Для тканей
```{r}
tmm_htseq_tissue <- tmm_creator(htseq_raw, htseq_total_filtered_samples, htseq_tissues)
tmm_salmon_genes_tissue <- tmm_creator(salmon_gene_counts, salmon_total_filtered_samples, salmon_tissues)
```


### По тканям для месяцев

```{r}
# Функция для разбиение на поддатасеты
tissue_splitter <- function(count_df, metad, grouping_factor){
  spl_list <- map(split(metad, metad[grouping_factor]), \(b) b |> pull(`Sample name`))
  final_list <- map(spl_list, \(b) htseq_raw |> select(b))
  
  return(final_list)
}

# Разбили
htseq_by_tissue_raw <- tissue_splitter(htseq_raw, metad, "tissue")
salmon_by_tissue_raw <- tissue_splitter(salmon_raw, metad, "tissue")
```

```{r}
# Посчитали TMM
tmm_tissue_list_htseq <- map(htseq_by_tissue_raw, \(b) tmm_creator2(b, htseq_total_filtered_samples, "characteristics: age", metad))
tmm_tissue_list_salmon <- map(salmon_by_tissue_raw, \(b) tmm_creator2(b, salmon_total_filtered_samples, "characteristics: age", metad))
```


```{r}
tmm_creator2(htseq_raw, htseq_total_filtered_samples, htseq_ages, htseq_tissues)

#function(raw_counts_df, filtered_samples, grouping_vector1, grouping_vector2){
htseq_raw2 <- htseq_raw[, htseq_total_filtered_samples]
edge_dge <- DGEList(counts=htseq_ages)
# Фильтруем по генам
keep <- filterByExpr(edge_dge, group=~htseq_ages)
edge_dge <- edge_dge[keep,,keep.lib.sizes=FALSE]
# Делаем TMM
edge_dge <- normLibSizes(edge_dge, method = "TMM")
return(edge_dge)
}
```


# Дебаг

```{r}
# tmp1_salmon <- salmon_gene_counts[, salmon_total_filtered_samples]
# edge_dge <- DGEList(counts=tmp1_salmon, group=salmon_ages)
# edge_counts <- edge_dge@.Data[[1]] |> as.data.frame() |> 
#   dplyr::summarise(across(where(is.numeric), ~sum(.x)))
```


### Подход из статьи

```{r}
# tmm_creator_article <- function(raw_counts_df, filtered_samples, grouping_vector){
#   raw_counts_df <- raw_counts_df[, filtered_samples]
#   edge_dge <- DGEList(counts=raw_counts_df, group=grouping_vector)
#   # Фильтруем по генам, убираем только нулевую экспрессию
#   keep <- filterByExpr(edge_dge, group=grouping_vector, min.count=1)
#   
# }
```


### TMM для Эржены в csv

```{r}
tmm_for_ergena <- function(tmm_df, output_name){
  features <- tmm_df@.Data[[1]] |> rownames()
  main_data <- tmm_df@.Data[[1]] |> as.data.frame()
  main_data <- main_data |> 
    mutate(
      feature = features, .before = 1
    )
  write_csv(main_data, paste0("tmm_filtered_", output_name, ".csv"))
}

tmm_for_ergena(tmm_htseq, "htseq")
tmm_for_ergena(tmm_salmon_genes, "salmon_genes")
tmm_for_ergena(tmm_salmon_tr, "salmon_trs")
```


## Генерируем TPM

Расчет длины генов

```{r}
# # Переводим айдишники в энсембл при необходимости
# htseq_genes_mgi <- rownames(htseq_raw)
# htseq_genes <- birt(htseq_genes_mgi, fromType = "SYMBOL", toType = "ENSEMBL", OrgDb = "org.Mm.eg.db")
# salmon_genes <- rownames(salmon_gene_counts)
# # Расчитываем длину генов
# htseq_length <- getGeneLengthAndGCContent(htseq_genes, "mmu", mode=c("biomart", "org.db"))
# salmon_length <- getGeneLengthAndGCContent(salmon_genes, "mmu", mode=c("biomart", "org.db"))
```

Функия для TPM

```{r}
# tpm_counter <- function(counts_df, length_vector){
#   # Псевдокод!
#   big_dataset <- left_join(length_vector, counts_df, by = var(""))
#   big_dataset |> 
#     mutate(
#       across(where(is.numeric(), ~ ))  # Убрать длину и гц из оценки
#     )
# }
tpm_counter2 <- function(counts_df, filtered_samples, symbol="Ensembl"){
  counts_df <- counts_df[, filtered_samples]
  tpm_matrix <- count2tpm(countMat = counts_df, idType = symbol, org = "mmus")
  tpm_matrix <- tpm_matrix |> 
    mutate(feature = rownames(tpm_matrix), .before = 1)
  
  return(tpm_matrix)
}

# Salmon
tpm_salmon_gene <- tpm_counter2(salmon_gene_counts, salmon_total_filtered_samples)
write_csv(tpm_salmon_gene, "tpm_salmon_gene.csv")

# Salmon transcripts
#tpm_salmon_trs <- tpm_counter2(salmon_counts, salmon_total_filtered_samples)
write_csv(tpm_salmon_trs, "tpm_salmon_trs.csv")

# Htseq
tpm_htseq <- tpm_counter2(htseq_raw, htseq_total_filtered_samples, "Symbol")
sym_to_ens <- bitr(rownames(tpm_htseq), fromType = "SYMBOL", toType = "ALIAS", OrgDb = "org.Mm.eg.db") |> 
  rename(feature = "SYMBOL")
tpm_htseq <- tpm_htseq |> 
  left_join(sym_to_ens, by = "feature") |> 
  relocate("ALIAS", .after = feature)
write_csv(tpm_htseq, "tpm_htseq.csv")
```

## Дебаг (поиск причин вылетов у 6-месячных мышей)

```{r}
tpm_htseq |> 
  summarise(across(where(is.numeric), ~ sum(.x)))
```

## Генерируем таблицы ДЭ

```{r}
# Пан-тишью функция
# TODO -- можем ли запихнуть выржаение в качестве аргумента?
de_simple_fit <- function(edge_df, group_vector){
  design <- model.matrix(~group_vector)
  edge_df <- estimateDisp(edge_df, design)
  fit <- glmFit(edge_df,design)
}

# Потканевая функция
de_2_fit <- function(edge_df, group_variable, metad){
  # Двоеточие или плюс?
  design <- model.matrix(~group_vector1:group_vector2)
  edge_df <- estimateDisp(edge_df, design)
  fit <- glmFit(edge_df,design)
}
```


### Пан-тишью

Моделирование

По месяцам
```{r}
htseq_de_fit <- de_simple_fit(tmm_htseq, htseq_ages)
salmon_de_fit <- de_simple_fit(tmm_salmon_genes_tissue, salmon_ages)

saveRDS(htseq_de_fit, "htseq_glm_fit_custom_pt_month.rds")
saveRDS(salmon_de_fit, "salmon_gene_glm_fit_custom_pt_month.rds")
```


По возрастным группам (с предш. TMM)
```{r}
htseq_de_art_fit <- de_simple_fit(tmm_htseq_art, htseq_ages_article)
salmon_de_art_fit <- de_simple_fit(tmm_salmon_genes_art, salmon_ages_article)

saveRDS(htseq_de_art_fit, "htseq_glm_fit_article_pt_month.rds")
saveRDS(salmon_de_art_fit, "salmon_gene_glm_fit_article_pt_month.rds")
```


### Оценка lfc

```{r}
de_htseq_month <- readRDS("htseq_glm_fit_custom_pt_month.rds")
de_salmon_month <- readRDS("salmon_gene_glm_fit_custom_pt_month.rds")
de_htseq_age_article <- readRDS("htseq_glm_fit_article_pt_month.rds")
de_salmon_age_article <- readRDS("salmon_gene_glm_fit_article_pt_month.rds")

contr_3 <- makeContrasts(month_1 - month_3, levels = salmon_ages |> unique())
contr_9 <- makeContrasts(month_1 - month_9, levels = salmon_ages |> unique())
contr_12 <- makeContrasts(month_1 - month_12, levels = salmon_ages |> unique())
contr_15 <- makeContrasts(month_1 - month_15, levels = salmon_ages |> unique())
contr_18 <- makeContrasts(month_1 - month_18, levels = salmon_ages |> unique())
contr_21 <- makeContrasts(month_1 - month_21, levels = salmon_ages |> unique())
contr_24 <- makeContrasts(month_1 - month_24, levels = salmon_ages |> unique())
contr_27 <- makeContrasts(month_1 - month_27, levels = salmon_ages |> unique())

lrt_show <- function(de_fitted, contrast){
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_salmon_3 <- lrt_show(de_salmon_month, contr_3)
lrt_salmon_9 <- lrt_show(de_salmon_month, contr_9)
lrt_salmon_12 <- lrt_show(de_salmon_month, contr_12)
lrt_salmon_15 <- lrt_show(de_salmon_month, contr_15)
lrt_salmon_18 <- lrt_show(de_salmon_month, contr_18)
lrt_salmon_21 <- lrt_show(de_salmon_month, contr_21)
lrt_salmon_24 <- lrt_show(de_salmon_month, contr_24)
lrt_salmon_27 <- lrt_show(de_salmon_month, contr_27)

lrt_htseq_3 <- lrt_show(de_htseq_month, contr_3)
lrt_htseq_9 <- lrt_show(de_htseq_month, contr_9)
lrt_htseq_12 <- lrt_show(de_htseq_month, contr_12)
lrt_htseq_15 <- lrt_show(de_htseq_month, contr_15)
lrt_htseq_18 <- lrt_show(de_htseq_month, contr_18)
lrt_htseq_21 <- lrt_show(de_htseq_month, contr_21)
lrt_htseq_24 <- lrt_show(de_htseq_month, contr_24)
lrt_htseq_27 <- lrt_show(de_htseq_month, contr_27)
```


```{r}
# age_month_table <- expand.grid(htseq_ages |> unique(), htseq_ages |> unique()) |> 
#   mutate(
#     num1 = Var1 |> str_split_i("_", 2) |> as.integer(),
#     num2 = Var2 |> str_split_i("_", 2) |> as.integer()
#   ) |> 
#   filter(num2 > num1) |> 
#   dplyr::arrange(
#     num1, num2
#   ) |> 
#   mutate(contrast = paste0(Var2, "-", Var1)) |> 
#   select(Var1, Var2, contrast)
# 
# design <- model.matrix(~htseq_ages)
# 
# res_contr <- makeContrasts(
#   age_month_table$contrast,
#   levels = levels(htseq_ages)
# )

# contrs <- makeContrasts(
#   month_1 - month_3,
#   month_1 - month_9,
#   month_1 - month_12,
#   month_1 - month_15,
#   month_1 - month_18,
#   month_1 - month_21,
#   month_1 - month_24,
#   month_1 - month_27,
#   levels = htseq_ages |> unique()
# )




# makeContrasts(
#   month_3 - month_1,
#   month_18 - month_12,
#   month_27 - month_6,
#   levels = levels(htseq_ages)
# )

# m_1_6_contr <- makeContrasts(
#   month_1 - month_6,
#   levels = htseq_ages |> unique()
# )
# 
# # lfc_all <- glmLRT(htseq_de_fit, coef = 4)
# lfc_all <- glmLRT(htseq_de_fit, contrast = m_1_6_contr)
# results(lfc_all)
# lfc_all@.Data[[14]] |> filter(PValue < 0.05)
# 
# m_1_3_contr <- makeContrasts(
#   month_1 - month_3,
#   levels = htseq_ages |> unique()
# )
# lfc_all_3 <- glmLRT(htseq_de_fit, contrast = m_1_3_contr)
# lfc_all_3@.Data[[14]] |> filter(PValue < 0.05)
# 
# 
# 
# # lfc_all <- glmLRT(htseq_de_fit, coef = 4)
# lfc_all_s <- glmLRT(salmon_de_fit, contrast = m_1_6_contr)
# lfc_all_s@.Data[[14]] |> filter(PValue < 0.05)
# 
# 
# lfc_all_3_s <- glmLRT(salmon_de_fit, contrast = m_1_3_contr)
# lfc_all_3_s@.Data[[14]] |> filter(PValue < 0.05)
# 
# m_6_9_contr <- makeContrasts(
#   month_6 - month_9,
#   levels = htseq_ages |> unique()
# )

# salmon_de_fit <- readRDS("salmon_gene_glm_fit.rds")

# lfc_all_6_9_s <- glmLRT(salmon_de_fit, contrast = m_6_9_contr)
# lfc_all_6_9_s@.Data[[14]] |> filter(PValue < 0.05)
# 
# (htseq_ages |> unique())[-1]
# levels(htseq_ages)


```

Дебаг
```{r}
three_ages <- metad |> 
  dplyr::filter(
    `characteristics: age` %in% c("month_month_6", "month_month_3", "month_month_1")
  ) |> 
  select(`Sample name`, `characteristics: age`, `tissue`)

three_transp <- htseq_raw[,three_ages$`Sample name`] |> t() |> as.data.frame()

three_combo <- three_ages |> 
  left_join(
    three_transp |> mutate(
    `Sample name` = rownames(three_transp)
  ), by = "Sample name"
  )

three_combo |> 
  filter(`1110004F10Rik` > 1000) |> 
  ggplot()+
  geom_boxplot(aes(y = `0610005C13Rik`, x=`characteristics: age`))
```

### Потканевая экспрессия

```{r}
htseq_de_fit <- de_simple_fit(tmm_htseq_tissue, htseq_tissues)
salmon_de_fit <- de_simple_fit(tmm_salmon_tissue, salmon_tissues)

saveRDS(htseq_de_fit, "htseq_glm_fit_tissues.rds")
saveRDS(salmon_de_fit, "salmon_gene_glm_fit_tissues.rds")
```

### Потканевая экспрессия с возрастом

```{r}
# Делаем вторую функцию для ДЭ
de_2_fit <- function(edge_df, group_variable, metad){
  # Двоеточие или плюс?
  group_vector1 <- metad |> filter(`Sample name` %in% colnames(edge_df@.Data[[1]])) |> pull(group_variable)
  design <- model.matrix(~group_vector1)
  edge_df <- estimateDisp(edge_df, design)
  fit <- glmFit(edge_df,design)
}

# Расчитываем ДЭ по возрасту в отдельных тканях
de_tissues_htseq <- map(tmm_tissue_list_htseq, \(b) de_2_fit(b, "characteristics: age", metad))
de_tissues_salmon <- map(tmm_tissue_list_salmon, \(b) de_2_fit(b, "characteristics: age", metad))
saveRDS(de_tissues_htseq, "de_tissues_htseq.rds")
saveRDS(de_tissues_salmon, "de_tissues_salmon.rds")
```


### lfc для потканевой экспресии

```{r}
de_tissues_htseq <- readRDS(htseq_de_fit, "de_tissues_htseq.rds")
de_tissues_salmon <- readRDS(salmon_de_fit, "de_tissues_salmon.rds")

lrt_show_3_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_3, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_6_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_6, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_9_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_9, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_12_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_12, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_15_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_15, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_18_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_18, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_21_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_21, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_24_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_24, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_27_htseq <- function(de_fitted){
  htseq_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~htseq_age)
  contrast <- makeContrasts(-htseq_agegroup_vector1month_27, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_3_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_3, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_6_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_6, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_9_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_9, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_12_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_12, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_15_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_15, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_18_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_18, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_21_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_21, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_24_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_24, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lrt_show_27_salmon <- function(de_fitted){
  salmon_age <- colnames(de_fitted@.Data[[1]])
  design_de <- model.matrix(~salmon_age)
  contrast <- makeContrasts(-salmon_agegroup_vector1month_27, levels = colnames(design_de))
  lfc <- glmLRT(de_fitted, contrast = contrast)
  lfc_processed <- lfc@.Data[[14]]
}

lfc_htseq_3_res <- map(de_tissues_htseq, \(b) lrt_show_3_htseq(b))
lfc_htseq_6_res <- map(de_tissues_htseq, \(b) lrt_show_6_htseq(b))
lfc_htseq_9_res <- map(de_tissues_htseq, \(b) lrt_show_9_htseq(b))
lfc_htseq_12_res <- map(de_tissues_htseq, \(b) lrt_show_12_htseq(b))
lfc_htseq_15_res <- map(de_tissues_htseq, \(b) lrt_show_15_htseq(b))
lfc_htseq_18_res <- map(de_tissues_htseq, \(b) lrt_show_18_htseq(b))
lfc_htseq_21_res <- map(de_tissues_htseq, \(b) lrt_show_21_htseq(b))
lfc_htseq_24_res <- map(de_tissues_htseq, \(b) lrt_show_24_htseq(b))
lfc_htseq_27_res <- map(de_tissues_htseq, \(b) lrt_show_27_htseq(b))

lfc_salmon_3_res <- map(de_tissues_salmon, \(b) lrt_show_3_salmon(b))
lfc_salmon_6_res <- map(de_tissues_salmon, \(b) lrt_show_6_salmon(b))
lfc_salmon_9_res <- map(de_tissues_salmon, \(b) lrt_show_9_salmon(b))
lfc_salmon_12_res <- map(de_tissues_salmon, \(b) lrt_show_12_salmon(b))
lfc_salmon_15_res <- map(de_tissues_salmon, \(b) lrt_show_15_salmon(b))
lfc_salmon_18_res <- map(de_tissues_salmon, \(b) lrt_show_18_salmon(b))
lfc_salmon_21_res <- map(de_tissues_salmon, \(b) lrt_show_21_salmon(b))
lfc_salmon_24_res <- map(de_tissues_salmon, \(b) lrt_show_24_salmon(b))
lfc_salmon_27_res <- map(de_tissues_salmon, \(b) lrt_show_27_salmon(b))
```


## Сопоставление htseq и salmon

### Корреляция между сырыми фильтрованными по образцам каунтами
```{r}
# Фильтрация образцов
common_filtered_samples <- intersect(htseq_total_filtered_samples, salmon_total_filtered_samples)
htseq_filt_raw <- htseq_raw[, htseq_total_filtered_samples]
salmon_filt_raw <- salmon_gene_counts[, salmon_total_filtered_samples]
sym_to_ens_raw <- bitr(rownames(htseq_filt_raw), fromType = "SYMBOL", toType = "ENSEMBL", OrgDb = "org.Mm.eg.db")

salmon_genes_raw <- rownames(salmon_filt_raw)
salmon_and_htseq_genes <- intersect(sym_to_ens_raw$ENSEMBL, salmon_genes_raw)

pre_cor_raw_counts_df <- inner_join(
  salmon_filt_raw |> 
    mutate(gene = rownames(salmon_filt_raw)) |> 
    filter(gene %in% salmon_and_htseq_genes) |> 
    pivot_longer(!gene, names_to = "Sample name", values_to = "Counts_salmon"),
  left_join(sym_to_ens_raw |> rename(gene = "SYMBOL"), htseq_filt_raw |> mutate(gene = rownames(htseq_filt_raw)), by = "gene") |> 
    filter(ENSEMBL %in% salmon_and_htseq_genes) |> 
    distinct(ENSEMBL, .keep_all = TRUE) |> 
    dplyr::select(-gene) |> 
    rename(gene = "ENSEMBL") |> 
    pivot_longer(!gene, names_to = "Sample name", values_to = "Counts_htseq"),
  by = c("gene", "Sample name")
)

pre_cor_raw_counts_df_with_meta <- pre_cor_raw_counts_df |> left_join(
  metad, by = "Sample name"
)


saveRDS(pre_cor_raw_counts_df_with_meta, "pre_cor_raw_counts_df.rds")

pre_cor_raw_counts_df_with_meta <- readRDS("pre_cor_raw_counts_df.rds")
# Общая корреляция
cor(pre_cor_raw_counts_df_with_meta$Counts_salmon, pre_cor_raw_counts_df_with_meta$Counts_htseq)

# По возрасту
pre_cor_raw_counts_df_with_meta |> 
  group_by(`characteristics: age`) |> 
  summarise(correlation = cor(Counts_salmon, Counts_htseq))
  
# По полу
pre_cor_raw_counts_df_with_meta |> 
  group_by(`characteristics: sex`) |> 
  summarise(correlation = cor(Counts_salmon, Counts_htseq))

# По возрастной группе
pre_cor_raw_counts_df_with_meta |> 
  group_by(age_group_article) |> 
  summarise(correlation = cor(Counts_salmon, Counts_htseq))
 
# По ткани
pre_cor_raw_counts_df_with_meta |> 
  group_by(tissue) |> 
  summarise(correlation = cor(Counts_salmon, Counts_htseq))
```

### Корреляция между lfc на разном уровне сравнения 1-го месяца с более поздними стадиями
```{r}
lfc_comparator_with_comparing <- function(de_1, de_2){
  # Первый аргумент -- тот, который требует перевода
  sym_to_ens <- bitr(rownames(de_1), fromType = "SYMBOL", toType = "ENSEMBL", OrgDb = "org.Mm.eg.db")
  lfc_delta <- left_join(
    sym_to_ens |> rename(feature = "SYMBOL"), 
    de_1 |> 
      mutate(feature = rownames(de_1)),
    by = "feature"
  ) |> 
  select(-feature) |>
  rename(feature = "ENSEMBL",
         htseq_logFC = "logFC") |> 
  inner_join(
    de_2 |> 
      mutate(feature = rownames(de_2)) |> 
      rename(salmon_logFC = "logFC"),
    by = "feature"
  )
  
  cor(lfc_delta$salmon_logFC, lfc_delta$htseq_logFC)
}

lfc_comparator_with_comparing(lrt_htseq_3, lrt_salmon_3)
lfc_comparator_with_comparing(lrt_htseq_9, lrt_salmon_9)
lfc_comparator_with_comparing(lrt_htseq_12, lrt_salmon_12)
lfc_comparator_with_comparing(lrt_htseq_15, lrt_salmon_15)
lfc_comparator_with_comparing(lrt_htseq_18, lrt_salmon_18)
lfc_comparator_with_comparing(lrt_htseq_21, lrt_salmon_21)
lfc_comparator_with_comparing(lrt_htseq_24, lrt_salmon_24)
lfc_comparator_with_comparing(lrt_htseq_27, lrt_salmon_27)
```

### Корреляция между lfc для разном уровне сравнения 1-го месяца с более поздними стадиями

```{r}
map2(lfc_htseq_27_res, lfc_salmon_27_res, \(b, d) lfc_comparator_with_comparing(b, d))

# test_de_1 <- lfc_htseq_27_res[[1]]
# test_de_2 <- lfc_salmon_27_res[[1]]

# sym_to_ens <- bitr(rownames(test_de_1), fromType = "SYMBOL", toType = "ENSEMBL", OrgDb = "org.Mm.eg.db")
# lfc_delta <- left_join(
#   sym_to_ens |> rename(feature = "SYMBOL"), 
#   test_de_1 |> 
#     mutate(feature = rownames(test_de_1)),
#   by = "feature"
# ) |> 
# select(-feature) |>
# rename(feature = "ENSEMBL",
#        htseq_logFC = "logFC") |> 
# inner_join(
#   test_de_2 |> 
#     mutate(feature = rownames(test_de_2)) |> 
#     rename(salmon_logFC = "logFC"),
#   by = "feature"
# )
#   
#   cor(lfc_delta$salmon_logFC, lfc_delta$htseq_logFC)

# lfc_comparator_with_comparing(lfc_htseq_27_res[[1]], lfc_salmon_27_res[[1]])
```


# Old pipeline

#### HTSEQ

Проверка на фильтрацию каунтов
```{r}
# htseq_total_counts <- htseq_raw |> 
#   summarise(across(everything(), ~ sum(.x)))
# 
# samples_ht <- htseq_total_counts |> t() |> rownames()
# counts_ht <- htseq_total_counts |> t()
# 
# ht_for_filt <- tibble(
#   sample = samples_ht,
#   counts = counts_ht
# )
# 
# good_ht_samples <- ht_for_filt |> 
#   filter(counts > 5000000) |> 
#   pull(sample)
```


```{r}
# Проверяем на наличие каунтов с нулевой экспрессией
# Делаем эджаровский объект
# edge_dge <- DGEList(counts=htseq_raw, group=age_group)
# # Проверяем, есть лм образцы с нулевой экспрессией
# null_lib <-(edge_dge@.Data[[2]][["lib.size"]] > 0)
# null_lib |> sum()
# 
# good_colnames <- colnames(htseq_raw[,null_lib])
# # Фильтруем
# htseq_raw <- htseq_raw[, good_colnames]
# age_group <- age_group[null_lib]
# # Делаем эджаровский объект снова
# edge_dge <- DGEList(counts=htseq_raw, group=age_group)
# # Фильтруем
# keep <- filterByExpr(edge_dge, group=age_group)
# edge_dge <- edge_dge[keep,,keep.lib.sizes=FALSE]
# # Делаем TMM
# edge_dge <- normLibSizes(edge_dge, method = "TMM")
# samples <- edge_dge@.Data[[1]] |> colnames()
# genes <- edge_dge@.Data[[1]] |> rownames()
# edge_dge@.Data[[1]] |> as.data.frame() |> write_csv("htseq_without_pre_filtering_tmm.csv")
# design <- model.matrix(~age_group)
# fit <- glmQLFit(edge_dge,design)
# qlf <- glmQLFTest(fit)
# topTags(qlf)
```


#### salmon

##### Поэкзонно

```{r}
# Читаем каунты
# salmon_counts <- read.csv("salmon/counts_raw.csv")
# # Присваиваем имена генов
# gene_names <- salmon_counts[[1]]
# # Убираем NA-ные образцы
# salmon_counts <- salmon_counts[, valid_names]
# # Даем рядам имена генов
# rownames(salmon_counts) <- gene_names
```

```{r}
# Проверяем на наличие каунтов с нулевой экспрессией
# Делаем эджаровский объект
# edge_sal <- DGEList(counts=salmon_counts, group=age_group)
# # Проверяем, есть лм образцы с нулевой экспрессией
# null_lib <-(edge_sal@.Data[[2]][["lib.size"]] > 0)
# 
# good_colnames <- colnames(salmon_counts[,null_lib])
# # Фильтруем
# salmon_counts <- salmon_counts[, good_colnames]
# age_group <- age_group[null_lib]
# # Делаем эджаровский объект снова
# edge_sal <- DGEList(counts=salmon_counts, group=age_group)
# # Фильтруем
# keep <- filterByExpr(edge_sal, group=age_group)
# edge_sal <- edge_sal[keep,,keep.lib.sizes=FALSE]
# # Делаем TMM
# edge_sal <- normLibSizes(edge_sal, method = "TMM")
# samples <- edge_sal@.Data[[1]] |> colnames()
# genes <- edge_sal@.Data[[1]] |> rownames()
# edge_sal@.Data[[1]] |> as.data.frame() |> write_csv("salmon_exon_without_pre_filtering_tmm.csv")
# saveRDS(edge_sal, "salmon_tmm.Rdata")
# design <- model.matrix(~age_group)
# fit <- glmQLFit(edge_sal,design)
# qlf <- glmQLFTest(fit)
# topTags(qlf)
```


##### Погенно



Проверка на фильтрацию каунтов
```{r}
# salmon_gene_total_counts <- salmon_gene_counts |> 
#   summarise(across(everything(), ~ sum(.x)))
# 
# samples_salmon <- salmon_gene_total_counts |> t() |> rownames()
# counts_salmon <- salmon_gene_total_counts |> t()
# 
# salmon_for_filt <- tibble(
#   sample = samples_salmon,
#   counts = counts_salmon
# )
# good_salmon_samples <- salmon_for_filt |> 
#   filter(counts > 5000000) |> 
#   pull(sample)
```


```{r}
# Проверяем на наличие каунтов с нулевой экспрессией
# Делаем эджаровский объект
# edge_gene_sal <- DGEList(counts=salmon_gene_counts, group=age_group)
# # Проверяем, есть лм образцы с нулевой экспрессией
# null_lib <-(edge_gene_sal@.Data[[2]][["lib.size"]] > 0)
# 
# good_colnames <- colnames(salmon_gene_counts[,null_lib])
# # Фильтруем
# salmon_gene_counts <- salmon_gene_counts[, good_colnames]
# age_group <- age_group[null_lib]
# # Делаем эджаровский объект снова
# edge_gene_sal <- DGEList(counts=salmon_gene_counts, group=age_group)
# # Фильтруем
# keep <- filterByExpr(edge_gene_sal, group=age_group)
# edge_gene_sal <- edge_gene_sal[keep,,keep.lib.sizes=FALSE]
# # Делаем TMM
# edge_gene_sal <- normLibSizes(edge_gene_sal, method = "TMM")
# samples <- edge_gene_sal@.Data[[1]] |> colnames()
# genes <- edge_gene_sal@.Data[[1]] |> rownames()
# edge_gene_sal@.Data[[1]] |> as.data.frame() |> write_csv("salmon_gene_without_pre_filtering_tmm.csv")
# saveRDS(edge_gene_sal, "salmon_tmm.Rdata")
# design <- model.matrix(~age_group)
# fit <- glmQLFit(edge_gene_sal,design)
# qlf <- glmQLFTest(fit)
# topTags(qlf)
```


#### FeatureCounts

```{r}
# Проверяем на наличие каунтов с нулевой экспрессией
# Делаем эджаровский объект
# edge_sal <- DGEList(counts=salmon_gene_counts, group=age_group)
# # Проверяем, есть лм образцы с нулевой экспрессией
# null_lib <-(edge_sal@.Data[[2]][["lib.size"]] > 0)
# 
# good_colnames <- colnames(salmon_gene_counts[,null_lib])
# # Фильтруем
# salmon_gene_counts <- salmon_gene_counts[, good_colnames]
# age_group <- age_group[null_lib]
# # Делаем эджаровский объект снова
# edge_sal <- DGEList(counts=salmon_gene_counts, group=age_group)
# # Фильтруем
# keep <- filterByExpr(edge_sal, group=age_group)
# edge_sal <- edge_sal[keep,,keep.lib.sizes=FALSE]
# # Делаем TMM
# edge_sal <- normLibSizes(edge_sal, method = "TMM")
# samples <- edge_sal@.Data[[1]] |> colnames()
# genes <- edge_sal@.Data[[1]] |> rownames()
# edge_sal@.Data[[1]] |> as.data.frame() |> write_csv("salmon_exon_without_pre_filtering_tmm.csv")
# saveRDS(edge_sal, "salmon_tmm.Rdata")
# design <- model.matrix(~age_group)
# fit <- glmQLFit(edge_sal,design)
# qlf <- glmQLFTest(fit)
# topTags(qlf)
```

